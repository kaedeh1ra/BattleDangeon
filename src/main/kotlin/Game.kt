package ru.kaed

import ru.kaed.data.DungeonMap
import ru.kaed.data.model.Player

class Game {
    companion object {
        fun start() {
            val player = Player(0, 0)
            val map = DungeonMap(width = 10, height = 10, player = player)
            map.spawnEnemies(4)
            map.spawnItems(3)

            println("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–æ–¥–∑–µ–º–µ–ª—å–µ!")
            println("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ W/A/S/D –¥–ª—è —Ö–æ–¥—å–±—ã, I –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è.\n")

            while (player.isAlive()) {
                map.render()
                print("> ")
                when (readln().trim().lowercase()) {
                    "w" -> map.movePlayer(0, -1)
                    "s" -> map.movePlayer(0, 1)
                    "a" -> map.movePlayer(-1, 0)
                    "d" -> map.movePlayer(1, 0)
                    "i" -> {
                        if (player.inventory.isEmpty()) {
                            println("–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç–æ–π.")
                        } else {
                            println("–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å:")
                            player.inventory.forEachIndexed { i, item ->
                                println("[$i] ${item.name}")
                            }
                            print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º (–∏–ª–∏ Enter –¥–ª—è —Å–∫–∏–ø–∞): ")
                            val input = readlnOrNull()?.toIntOrNull()
                            input?.let { index ->
                                val item = player.inventory.getOrNull(index)
                                item?.use(player)
                                player.inventory.remove(item)
                            }
                        }
                    }

                    else -> println("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")
                }

                if (!player.isAlive()) println("üíÄ –¢—ã —É–º–µ—Ä! –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞.")
            }
        }
    }
}